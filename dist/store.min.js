!function(define) {
define([], function() {
"use strict";
function store(options) {
options = options || {};
var defaults = {
identifier: "id"
}, plugins = [], lastParams = "", currentParams = {}, dataStore = {
add: function(items) {
return this.items ? void (Array.isArray(items) ? this.items = this.items.concat(items) : this.items.push(items)) : this.set(items);
},
set: function(items) {
this.clear(), this.items = items.concat([]);
},
get: function(value, optionalIdentifier) {
if (!value || !this.items) return null;
var i, key = optionalIdentifier || options.identifier || defaults.identifier;
for (i = 0; i < this.items.length; i++) if (this.items[i][key] === value) return this.items[i];
return null;
},
remove: function(itemsOrIdOrIds) {
var i, k, items = this.items, key = options.identifier || defaults.identifier, arr = Array.isArray(itemsOrIdOrIds) ? itemsOrIdOrIds : [ itemsOrIdOrIds ], isId = "string" == typeof arr[0] || "number" == typeof arr[0];
for (i = 0; i < arr.length; i++) for (k = items.length - 1; k >= 0; k--) if (isId && arr[i] === items[k][key] || arr[i] === items[k]) {
items.splice(k, 1), k = items.length - 1;
break;
}
},
clear: function() {
this.items = [], lastParams = "", currentParams = {};
},
fetch: function(params) {
if (!this.items) return [];
var i, strParams, items = this.items.concat([]);
if (currentParams = mix(currentParams, params), strParams = JSON.stringify(currentParams), 
items && strParams === lastParams) return items;
for (lastParams = strParams, i = 0; i < plugins.length; i++) items = plugins[i](items, currentParams, this);
return items;
},
load: function(url) {}
};
return toArray(options.plugins).forEach(function(pluginName) {
var i, order, plugin = store.plugins[pluginName];
if (!plugin) throw Error("plugin not found: " + pluginName);
if (order = plugin.order, plugins.length) if (1 === plugins.length) plugins[0].order <= order ? plugins.push(plugin) : plugins.unshift(plugin); else if (plugins[0].order > order) plugins.unshift(plugin); else {
for (i = 1; i < plugins.length; i++) if (order === plugins[i - 1].order || order > plugins[i - 1].order && order < plugins[i].order) return void plugins.splice(i, 0, plugin);
plugins.push(plugin);
} else plugins.push(plugin);
dataStore.plugins = plugins;
}), dataStore;
}
function mix(o, p) {
return p && Object.keys(p).forEach(function(key) {
o[key] = p[key];
}), o;
}
function toArray(object) {
return object ? Array.isArray(object) ? object : "string" == typeof object ? object.split(",").map(function(s) {
return s.trim();
}) : (console.warn("unknown plugins type:", object), []) : [];
}
function filter(items, params, store) {
var i, value, propCount, propTotal, filtered = [];
if (!params.filter) return items;
for (propTotal = Object.keys(params.filter).length, i = 0; i < items.length; i++) propCount = 0, 
Object.keys(params.filter).forEach(function(key) {
value = params.filter[key], value.indexOf("||") > -1 ? value.split("||").forEach(function(v) {
v = v.trim(), items[i][key] === v && propCount++;
}) : items[i][key] === value && propCount++;
}), propCount === propTotal && filtered.push(items[i]);
return filtered;
}
function paginate(items, params, store) {
return params.paginate ? items.slice(params.paginate.start, params.paginate.start + params.paginate.count) : items;
}
function sort(items, params, store) {
var key, result;
return params.sort ? (Object.keys(params.sort).forEach(function(k) {
"dir" !== k && (key = params.sort[k]);
}), result = "asc" === params.sort.dir ? -1 : 1, items.sort(function(a, b) {
return a[key] < b[key] ? -result : a[key] > b[key] ? result : 0;
}), items) : items;
}
if (store.plugins = {}, store.addPlugin = function(type, plugin, order) {
plugin.order = order || 100, store.plugins[type] = plugin;
}, store.addPlugin("filter", filter, 10), store.addPlugin("paginate", paginate, 30), 
store.addPlugin("sort", sort, 20), "function" == typeof customLoader) customLoader(store, "store"); else {
if ("function" == typeof define && define.amd) return store;
"undefined" != typeof module ? module.exports = store : "undefined" != typeof window && (window.store = store);
}
});
}("function" == typeof define && define.amd ? define : function(ids, factory) {
var deps = ids.map(function(id) {
return "function" == typeof require ? require(id) : window[id];
});
"undefined" != typeof module ? module.exports = factory.apply(null, deps) : factory.apply(null, deps);
});