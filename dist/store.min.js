!function(root, factory) {
"function" == typeof customLoader ? customLoader(factory, "store") : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? module.exports = factory() : (root.returnExports = factory(), 
window.store = factory());
}(this, function() {
"use strict";
function store(options) {
options = options || {};
var lastQueriedItems, dataStore, defaults = {
identifier: "id"
}, plugins = [], lastParams = "", currentParams = {}, changes = !0;
return options.identifier = options.identifier || defaults.identifier, dataStore = {
identifier: options.identifier,
get: function(value, optionalIdentifier) {
if (!value || !this.items) return null;
var i, key = optionalIdentifier || options.identifier;
for (value += "", i = 0; i < this.items.length; i++) if (this.items[i][key] + "" === value) return this.items[i];
return null;
},
set: function(items) {
this.clear(), items ? Array.isArray(items) ? this.items = items.concat([]) : this.items = [ items ] : this.items = [], 
lastParams = "", currentParams = {}, changes = !0;
},
getIndex: function(item) {
"object" != typeof item && (item = this.get(item));
var items = lastQueriedItems || this.items;
return items.indexOf(item);
},
getItemByIndex: function(index) {
var items = lastQueriedItems || this.items;
return items[index];
},
add: function(itemOrItems) {
return this.items ? (Array.isArray(itemOrItems) ? this.items = this.items.concat(itemOrItems) : this.items.push(itemOrItems), 
lastParams = "", currentParams = {}, void (changes = !0)) : this.set(itemOrItems);
},
remove: function(itemsOrIdOrIds) {
var i, k, items = this.items, key = options.identifier, arr = Array.isArray(itemsOrIdOrIds) ? itemsOrIdOrIds : [ itemsOrIdOrIds ], isId = "string" == typeof arr[0] || "number" == typeof arr[0];
for (i = 0; i < arr.length; i++) for (k = items.length - 1; k >= 0; k--) if (isId && arr[i] === items[k][key] || arr[i] === items[k]) {
items.splice(k, 1), k = items.length - 1;
break;
}
lastParams = "", currentParams = {}, changes = !0;
},
clear: function() {
this.items = [], lastParams = "", currentParams = {}, changes = !0;
},
fetch: function() {
console.error("please use query");
},
get hasListChanged() {
return changes;
},
query: function(params, altItems) {
if (!this.items && !altItems) return [];
var i, strParams, items = altItems ? altItems.concat([]) : this.items.concat([]);
if (currentParams = mix(currentParams, params), strParams = JSON.stringify(currentParams), 
items && !altItems && strParams === lastParams && lastQueriedItems) return lastQueriedItems;
for (i = 0; i < plugins.length; i++) items = plugins[i](items, currentParams, this);
return altItems || (lastParams = strParams, lastQueriedItems = items, changes = !1), 
items;
},
load: function(url) {}
}, dataStore.options = options, toArray(options.plugins).forEach(function(pluginName) {
var i, order, plugin = store.plugins[pluginName];
if (!plugin) throw Error("plugin not found: " + pluginName);
if (order = plugin.order, "mixin" === order) return void plugin(dataStore);
if (plugins.length) if (1 === plugins.length) plugins[0].order <= order ? plugins.push(plugin) : plugins.unshift(plugin); else if (plugins[0].order > order) plugins.unshift(plugin); else {
for (i = 1; i < plugins.length; i++) if (order === plugins[i - 1].order || order > plugins[i - 1].order && order < plugins[i].order) return void plugins.splice(i, 0, plugin);
plugins.push(plugin);
} else plugins.push(plugin);
dataStore.plugins = plugins;
}), dataStore;
}
function mix(o, p) {
return p && Object.keys(p).forEach(function(key) {
o[key] = p[key];
}), o;
}
function toArray(object) {
return object ? Array.isArray(object) ? object : "string" == typeof object ? object.split(",").map(function(s) {
return s.trim();
}) : (console.warn("unknown plugins type:", object), []) : [];
}
function filter(items, params, store) {
var i, value, propCount, propTotal, filtered = [];
if (!params.filter) return items;
for (propTotal = Object.keys(params.filter).length, i = 0; i < items.length; i++) propCount = 0, 
Object.keys(params.filter).forEach(function(key) {
value = params.filter[key], value.indexOf("||") > -1 ? value.split("||").forEach(function(v) {
v = v.trim(), items[i][key] === v && propCount++;
}) : items[i][key] === value && propCount++;
}), propCount === propTotal && filtered.push(items[i]);
return filtered;
}
function paginate(items, params, store) {
return params.paginate ? items.slice(params.paginate.start, params.paginate.start + params.paginate.count) : items;
}
function after(obj, method, fn) {
var _old = obj[method];
obj[method] = function(a, b, c) {
_old.call(obj, a, b, c), fn.call(obj, a, b, c);
};
}
function before(obj, method, fn) {
var _old = obj[method];
obj[method] = function(a, b, c) {
fn.call(obj, a, b, c), _old.call(obj, a, b, c);
};
}
function findSelected(arr, multiple) {
if (arr = Array.isArray(arr) ? arr : [ arr ], multiple) return arr.filter(function(item) {
return item.selected;
});
for (var i = 0; i < arr.length; i++) if (arr[i].selected) return arr[i];
return null;
}
function selection(dataStore) {
function isSelected(item) {
if (!Array.isArray(selected)) return item === selected;
for (var i = 0; i < selected.length; i++) if (selected[i] === item) return !0;
return !1;
}
function select(item) {
if (multiple || (dataStore.control = !1, dataStore.shift = !1), multiple || dataStore.control || dataStore.shift) {
if (!item) return;
if (dataStore.control || multiple && !dataStore.shift) if (Array.isArray(selected)) {
if (selected.indexOf(item) !== -1) return;
selected.push(item), lastSelected = item;
} else selected = selected ? [ selected, item ] : [ item ];
if (dataStore.shift) {
var a, b, i, lastIndex, itemIndex, lastItem = dataStore.getLastSelected();
if (lastItem) for (selected && !Array.isArray(selected) && (selected = [ selected ]), 
lastIndex = dataStore.getIndex(lastItem), itemIndex = dataStore.getIndex(item), 
lastIndex < itemIndex ? (a = lastIndex, b = itemIndex) : (b = lastIndex, a = itemIndex), 
i = a; i <= b; i++) selected.push(dataStore.getItemByIndex(i)); else selected = [ item ];
}
} else selected = item;
lastSelected = item;
}
function unselect(item) {
Array.isArray(selected) ? selected = selected.filter(function(m) {
return m !== item;
}) : item === selected && (selected = null);
}
var selected, lastSelected, opts = dataStore.options.selection || {}, multiple = !!opts.multiple;
dataStore.getLastSelected = function() {
return lastSelected ? lastSelected : selected ? Array.isArray(selected) ? selected[selected.length - 1] : selected : null;
}, after(dataStore, "add", function(itemOrItems) {
var items = findSelected(itemOrItems);
items && select(items);
}), after(dataStore, "set", function(itemOrItems) {
var items = findSelected(itemOrItems);
items && select(items);
}), before(dataStore, "remove", function(itemOrIdOrItemsOrIds) {
var arr = Array.isArray(itemOrIdOrItemsOrIds) ? itemOrIdOrItemsOrIds : [ itemOrIdOrItemsOrIds ];
arr.forEach(function(itemOrId) {
var item = "object" == typeof itemOrId ? itemOrId : dataStore.get(itemOrId);
isSelected(item) && unselect(item);
});
}), after(dataStore, "clear", function(itemOrItems) {
selected = null;
}), Object.defineProperty(dataStore, "selection", {
get: function() {
return selected ? Array.isArray(selected) ? dataStore.query(0, selected) : multiple ? [ selected ] : selected : null;
},
set: function(itemOrId) {
function setter(itemOrId) {
var item;
item = "object" != typeof itemOrId ? dataStore.get(itemOrId) : itemOrId, selected !== item && select(item);
}
Array.isArray(itemOrId) ? (dataStore.control || (selected = null), itemOrId.forEach(setter)) : (dataStore.control || dataStore.shift || (selected = null), 
setter(itemOrId));
}
});
}
function sort(items, params, store) {
var key, result;
return params.sort ? (!params.sort.asc && params.sort.key || console.error("Missing sort params. Did you mean:", example), 
Object.keys(params.sort).forEach(function(k) {
"dir" !== k && (key = params.sort[k]);
}), result = "asc" === params.sort.dir ? -1 : 1, items.sort(function(a, b) {
return a[key] < b[key] ? -result : a[key] > b[key] ? result : 0;
}), items) : items;
}
store.plugins = {}, store.addPlugin = function(type, plugin, order) {
plugin.order = order || 100, store.plugins[type] = plugin;
}, store.getIdentifier = function(itemOrItems) {
var item = Array.isArray(itemOrItems) ? itemOrItems[0] : itemOrItems;
return item.id ? "id" : void 0 !== item.value ? "value" : item.name ? "name" : item.label ? "label" : (console.error("items must have use of the following identifiers: `id`, `value`, `name`, `label`"), 
null);
}, store.addPlugin("filter", filter, 10), store.addPlugin("paginate", paginate, 30), 
store.addPlugin("selection", selection, "mixin");
var example = "store.query({sort:{dir:'asc', key:'id'}});";
return store.addPlugin("sort", sort, 20), store;
});